// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// calculateCrossingPercentage
double calculateCrossingPercentage(double Cx, double Cy, double Ax, double Ay, double Bx, double By, double R);
RcppExport SEXP _recurse_calculateCrossingPercentage(SEXP CxSEXP, SEXP CySEXP, SEXP AxSEXP, SEXP AySEXP, SEXP BxSEXP, SEXP BySEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Cx(CxSEXP);
    Rcpp::traits::input_parameter< double >::type Cy(CySEXP);
    Rcpp::traits::input_parameter< double >::type Ax(AxSEXP);
    Rcpp::traits::input_parameter< double >::type Ay(AySEXP);
    Rcpp::traits::input_parameter< double >::type Bx(BxSEXP);
    Rcpp::traits::input_parameter< double >::type By(BySEXP);
    Rcpp::traits::input_parameter< double >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateCrossingPercentage(Cx, Cy, Ax, Ay, Bx, By, R));
    return rcpp_result_gen;
END_RCPP
}
// getIsNewTrack
IntegerVector getIsNewTrack(StringVector trajId);
RcppExport SEXP _recurse_getIsNewTrack(SEXP trajIdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type trajId(trajIdSEXP);
    rcpp_result_gen = Rcpp::wrap(getIsNewTrack(trajId));
    return rcpp_result_gen;
END_RCPP
}
// getRecursionsCpp
List getRecursionsCpp(NumericVector trajX, NumericVector trajY, DatetimeVector trajT, StringVector trajId, NumericVector locX, NumericVector locY, double radius, double threshold, String timeunits, bool verbose);
RcppExport SEXP _recurse_getRecursionsCpp(SEXP trajXSEXP, SEXP trajYSEXP, SEXP trajTSEXP, SEXP trajIdSEXP, SEXP locXSEXP, SEXP locYSEXP, SEXP radiusSEXP, SEXP thresholdSEXP, SEXP timeunitsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type trajX(trajXSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type trajY(trajYSEXP);
    Rcpp::traits::input_parameter< DatetimeVector >::type trajT(trajTSEXP);
    Rcpp::traits::input_parameter< StringVector >::type trajId(trajIdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type locX(locXSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type locY(locYSEXP);
    Rcpp::traits::input_parameter< double >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< String >::type timeunits(timeunitsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(getRecursionsCpp(trajX, trajY, trajT, trajId, locX, locY, radius, threshold, timeunits, verbose));
    return rcpp_result_gen;
END_RCPP
}
// getRecursions3DCpp
List getRecursions3DCpp(NumericVector trajX, NumericVector trajY, NumericVector trajZ, DatetimeVector trajT, StringVector trajId, NumericVector locX, NumericVector locY, NumericVector locZ, double radius, double threshold, String timeunits, bool verbose);
RcppExport SEXP _recurse_getRecursions3DCpp(SEXP trajXSEXP, SEXP trajYSEXP, SEXP trajZSEXP, SEXP trajTSEXP, SEXP trajIdSEXP, SEXP locXSEXP, SEXP locYSEXP, SEXP locZSEXP, SEXP radiusSEXP, SEXP thresholdSEXP, SEXP timeunitsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type trajX(trajXSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type trajY(trajYSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type trajZ(trajZSEXP);
    Rcpp::traits::input_parameter< DatetimeVector >::type trajT(trajTSEXP);
    Rcpp::traits::input_parameter< StringVector >::type trajId(trajIdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type locX(locXSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type locY(locYSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type locZ(locZSEXP);
    Rcpp::traits::input_parameter< double >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< String >::type timeunits(timeunitsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(getRecursions3DCpp(trajX, trajY, trajZ, trajT, trajId, locX, locY, locZ, radius, threshold, timeunits, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_recurse_calculateCrossingPercentage", (DL_FUNC) &_recurse_calculateCrossingPercentage, 7},
    {"_recurse_getIsNewTrack", (DL_FUNC) &_recurse_getIsNewTrack, 1},
    {"_recurse_getRecursionsCpp", (DL_FUNC) &_recurse_getRecursionsCpp, 10},
    {"_recurse_getRecursions3DCpp", (DL_FUNC) &_recurse_getRecursions3DCpp, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_recurse(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
